# Generated by https://quicktype.io

from dataclasses import dataclass, field
from enum import Enum
from typing import Optional, List
from datetime import datetime

import numpy as np


class CreatorType(Enum):
    ARTIST = "artist"
    USER = "user"


class Creator:
    id: int
    name: str
    tracklist: str
    type: CreatorType
    link: Optional[str]

    def __init__(self, id: int, name: str, tracklist: str, type: CreatorType, link: Optional[str]) -> None:
        self.id = id
        self.name = name
        self.tracklist = tracklist
        self.type = type
        self.link = link


class AlbumType(Enum):
    ALBUM = "album"


class Album:
    id: int
    title: str
    cover: str
    cover_small: str
    cover_medium: str
    cover_big: str
    cover_xl: str
    md5_image: str
    tracklist: str
    type: AlbumType

    def __init__(self, id: int, title: str, cover: str, cover_small: str, cover_medium: str, cover_big: str, cover_xl: str, md5_image: str, tracklist: str, type: AlbumType) -> None:
        self.id = id
        self.title = title
        self.cover = cover
        self.cover_small = cover_small
        self.cover_medium = cover_medium
        self.cover_big = cover_big
        self.cover_xl = cover_xl
        self.md5_image = md5_image
        self.tracklist = tracklist
        self.type = type


class TitleVersion(Enum):
    EDIT = "(Edit)"
    EMPTY = ""
    THE_2017_REMASTER = "(2017 Remaster)"


class DatumType(Enum):
    TRACK = "track"


class Datum:
    id: int
    readable: bool
    title: str
    title_short: str
    title_version: TitleVersion
    link: str
    duration: int
    rank: int
    explicit_lyrics: bool
    explicit_content_lyrics: int
    explicit_content_cover: int
    preview: str
    md5_image: str
    time_add: int
    artist: Creator
    album: Album
    type: DatumType

    def __init__(self, id: int, readable: bool, title: str, title_short: str, title_version: TitleVersion, link: str, duration: int, rank: int, explicit_lyrics: bool, explicit_content_lyrics: int, explicit_content_cover: int, preview: str, md5_image: str, time_add: int, artist: Creator, album: Album, type: DatumType) -> None:
        self.id = id
        self.readable = readable
        self.title = title
        self.title_short = title_short
        self.title_version = title_version
        self.link = link
        self.duration = duration
        self.rank = rank
        self.explicit_lyrics = explicit_lyrics
        self.explicit_content_lyrics = explicit_content_lyrics
        self.explicit_content_cover = explicit_content_cover
        self.preview = preview
        self.md5_image = md5_image
        self.time_add = time_add
        self.artist = artist
        self.album = album
        self.type = type


class Tracks:
    data: List[Datum]
    checksum: str

    def __init__(self, data: List[Datum], checksum: str) -> None:
        self.data = data
        self.checksum = checksum


class Playlist_Data:
    id: int
    title: int
    description: str
    duration: int
    public: bool
    is_loved_track: bool
    collaborative: bool
    nb_tracks: int
    fans: int
    link: str
    share: str
    picture: str
    picture_small: str
    picture_medium: str
    picture_big: str
    picture_xl: str
    checksum: str
    tracklist: str
    creation_date: datetime
    md5_image: str
    picture_type: str
    creator: Creator
    type: str
    tracks: Tracks

    def __init__(self, id: int, title: int, description: str, duration: int, public: bool, is_loved_track: bool, collaborative: bool, nb_tracks: int, fans: int, link: str, share: str, picture: str, picture_small: str, picture_medium: str, picture_big: str, picture_xl: str, checksum: str, tracklist: str, creation_date: datetime, md5_image: str, picture_type: str, creator: Creator, type: str, tracks: Tracks) -> None:
        self.id = id
        self.title = title
        self.description = description
        self.duration = duration
        self.public = public
        self.is_loved_track = is_loved_track
        self.collaborative = collaborative
        self.nb_tracks = nb_tracks
        self.fans = fans
        self.link = link
        self.share = share
        self.picture = picture
        self.picture_small = picture_small
        self.picture_medium = picture_medium
        self.picture_big = picture_big
        self.picture_xl = picture_xl
        self.checksum = checksum
        self.tracklist = tracklist
        self.creation_date = creation_date
        self.md5_image = md5_image
        self.picture_type = picture_type
        self.creator = creator
        self.type = type
        self.tracks = tracks



@dataclass
class Song_Playlist:
    id: str
    title: str
    cover: str
    artist: str
    album: str
    preview_url: str
    artist_url: str
    album_id: str
    index: int
    img_cover: np.ndarray = field(init=False)
    img_artist: np.ndarray = field(init=False)
    
    def set_img_cover(self, img_cover):
        self.img_cover = img_cover
    def set_img_artist(self, img_artist):
        self.img_artist = img_artist

